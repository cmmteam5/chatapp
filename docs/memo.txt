rails generate scaffold workspace name:string admin:boolean

/******CREATE MODEL *******/
rails g model user name:string email:string password_digest:string

rails g model workspace name:string 

rails g model userworkspace workspace:belongs_to user:belongs_to 

rails g model group name:string purpose:string access_type:boolean workspace:belongs_to

rails g model groupuser group:belongs_to user:belongs_to

rails g model groupconversation message:text user:belongs_to group:belongs_to

rails g model groupthread thread_message:text groupconversation:belongs_to


/***********DESTROY MODEL ****************/
rails destroy model workspace
rails destroy model user
rails destroy model userworkspace
rails destroy model group
rails destroy model groupuser
rails destroy model groupconversation
rails destroy model groupthread


//////////////////////////////
rails destroy model user_conversation
rails g model user_conversation message:text image:string file:string receiver_id:integer starred_message:string  user:belongs_to

rails destroy model user_thread
rails g model user_thread  thread_message:text  receiver_id:integer user_conversation:belongs_to
/////////////////////////////////////////////////
rails generate migration remove_COLUMNNAME_from_TABLENAME COLUMNNAME:DATATYPE
rails generate migration remove_password_from_users password:string


/***************CREATE CONTROLLER********************/

rails destroy  controller workspace
rails g controller workspace

rails destroy  controller user
rails g controller user

rails destroy  controller group
rails g controller group

rails destroy controller groupuser
rails g controller groupuser

rails destroy controller userworkspace
rails g controller userworkspace

rails destroy  controller groupconversations
rails g controller groupconversations

rails destroy controller search
rails g controller search

rails destroy controller session
rails g controller session

rails destroy controller static_pages
rails g controller static_pages


************add attribute to table************

rails destroy migration add_level_to_userworkspace
rails g migration add_level_to_userworkspace level:string
......................................................

rails destroy migration add_level_to_group
rails g migration add_level_to_group level:string
....................................................

rails destroy migration add_level_to_groupuser
rails g migration add_level_to_groupuser level:string
....................................................

rails destroy migration add_password_digest_to_users
rails g migration add_password_digest_to_users password_digest:string
......................................................

rails db:migrate


///add default value to admin in workspace////
rails destroy migration add_test_column_to_workspace 
rails generate migration add_test_column_to_workspace admin:boolean
def change
    add_column :workspaces, :admin, :boolean, default:true
end


///remove columns 
rails destroy migration remove_email_from_group  
rails g migration remove_email_from_group email:string


************add time zone************
environment.rb
Rails .application.configure do 
config.time_zone='Tokyo'
config.active_record.default_timezone=:local
end

application.rb
config.active_record.default_timezone=:local
config.time_zone='Tokyo'
......................................................

************add localization************
#application.rb
config.i18n.available_locales = [:en, :ja]
config.i18n.default_locale = :en

#routes.rb
scope "(:locale)", locale: /en|ja/ do
end

#application_controller.rb
 before_action :set_locale
     private
     def set_locale
       I18n.locale = params[:locale] || session[:locale]|| I18n.default_locale
       session[:locale]=I18n.locale
     end
    
 
    private
     def default_url_options
           { locale: I18n.locale }
     end

# config/initializers/locale.rb
# Where the I18n library should search for translation files
I18n.load_path += Dir[Rails.root.join('lib', 'locale', '*.{rb,yml}')]
 
# Whitelist locales available for the application
I18n.available_locales = [:en, :ja]
 
# Set default locale to something other than :en
I18n.default_locale = :en
......................................................

************add logger************
#config/application.rb
config.log_level = :error

#config/environment/development.rb
config.log_level = :debug

#lib/message_formatter.rb
class MessageFormatter < ActiveSupport::Logger::SimpleFormatter
  def call(severity, time, progname, msg)
    formatted_severity = sprintf("%-5s",severity.to_s)
    formatted_time = time.strftime("%Y-%m-%d %H:%M:%S")
    "[#{formatted_severity} #{formatted_time} #{$}] : #{progname} #{msg}\n"
  end
end

#config/application.rb 
config.autoload_paths << Rails.root.join("lib")
config.eager_load_paths << Rails.root.join("lib")

#config/environment/development.rb
config.log_formatter = MessageFormatter.new


*******db:seed**********
User.create!(name: "Shoon Lae Khaing",
            email:"shoon@gmail.com",
            password:"123456",
            created_at:Time.zone.now,
            updated_at:Time.zone.now)
 
 rails db:migrate:reset
 rails db:seed

 ****************add kaminari ****************

 gem 'kaminari'## Gemfile

 rails g kaminari:config ## Generate the kaminari config

 rails g kaminari:views bootstrap3## Generate kaminari views
 
controller.rb
  def index
    @users = User.order(:name).page(params[:page])
  end


  index.html.erb   ##View
  <%= paginate @users %>

  user.rb ##model
class User < ApplicationRecord
  paginates_per 5
end




 



